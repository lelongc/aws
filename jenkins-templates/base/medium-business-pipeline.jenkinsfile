pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: maven
    image: maven:3.8.6-openjdk-11
    command:
    - cat
    tty: true
  - name: docker
    image: docker:19.03.1
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }
    
    environment {
        DOCKER_REGISTRY = 'registry.company.com'
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/myapp"
        VERSION = "${BUILD_NUMBER}"
        SONAR_HOST = 'http://sonarqube:9000'
        DOCKER_CREDENTIALS = credentials('docker-registry-credentials')
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                container('maven') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                container('maven') {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                container('maven') {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar -Dsonar.host.url=${SONAR_HOST}'
                    }
                }
            }
            post {
                always {
                    recordIssues enabledForFailure: true, tool: sonarQube()
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    sh "docker build -t ${DOCKER_IMAGE}:${VERSION} -t ${DOCKER_IMAGE}:latest ."
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                container('docker') {
                    sh "echo ${DOCKER_CREDENTIALS_PSW} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_CREDENTIALS_USR} --password-stdin"
                    sh "docker push ${DOCKER_IMAGE}:${VERSION}"
                    sh "docker push ${DOCKER_IMAGE}:latest"
                }
            }
        }
        
        stage('Deploy to Dev') {
            steps {
                container('docker') {
                    sh "kubectl apply -f k8s/dev/deployment.yaml"
                    sh "kubectl set image deployment/myapp-deployment myapp=${DOCKER_IMAGE}:${VERSION} -n dev"
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                container('maven') {
                    sh 'mvn verify -Pintegration-tests'
                }
            }
            post {
                always {
                    junit '**/target/failsafe-reports/*.xml'
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                container('docker') {
                    sh "kubectl apply -f k8s/staging/deployment.yaml"
                    sh "kubectl set image deployment/myapp-deployment myapp=${DOCKER_IMAGE}:${VERSION} -n staging"
                }
            }
        }
        
        stage('Manual Approval') {
            when {
                branch 'master'
            }
            steps {
                input message: 'Deploy to production?', ok: 'Yes'
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'master'
            }
            steps {
                container('docker') {
                    sh "kubectl apply -f k8s/production/deployment.yaml"
                    sh "kubectl set image deployment/myapp-deployment myapp=${DOCKER_IMAGE}:${VERSION} -n production"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            slackSend channel: '#ci-cd', color: 'good', message: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
        failure {
            slackSend channel: '#ci-cd', color: 'danger', message: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
    }
}
