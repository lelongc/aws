name: Terraform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (dev, staging, prod)'
        required: true
        default: 'dev'
      region:
        description: 'AWS region'
        required: true
        default: 'us-east-1'
      action:
        description: 'Action to perform (plan, apply)'
        required: true
        default: 'plan'

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    
    # Use environment secrets for the specified environment
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    env:
      TF_ENV: ${{ github.event.inputs.environment || 'dev' }}
      TF_REGION: ${{ github.event.inputs.region || 'us-east-1' }}
      TF_ACTION: ${{ github.event.inputs.action || 'plan' }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5
    
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      working-directory: regions/${{ env.TF_REGION }}
    
    - name: Terraform Init
      id: init
      run: terraform init -backend-config=../../config/${{ env.TF_ENV }}/${{ env.TF_REGION }}-backend.hcl
      working-directory: regions/${{ env.TF_REGION }}
    
    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: regions/${{ env.TF_REGION }}
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file=../../config/${{ env.TF_ENV }}/${{ env.TF_REGION }}.tfvars -out=tfplan
      working-directory: regions/${{ env.TF_REGION }}
    
    - name: Terraform Apply
      if: env.TF_ACTION == 'apply' && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
      run: |
        # Add extra protection for production
        if [ "${{ env.TF_ENV }}" == "prod" ] && [ "${{ github.ref }}" != "refs/heads/main" ]; then
          echo "Cannot apply to production from branches other than main"
          exit 1
        fi
        
        terraform apply tfplan
      working-directory: regions/${{ env.TF_REGION }}
    
    # Upload plan as an artifact
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ env.TF_ENV }}-${{ env.TF_REGION }}
        path: regions/${{ env.TF_REGION }}/tfplan
        if-no-files-found: error
